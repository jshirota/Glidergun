# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import glidergun_pb2 as glidergun__pb2


class GrpcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.token = channel.unary_unary(
                '/glidergun.Grpc/token',
                request_serializer=glidergun__pb2.TokenRequest.SerializeToString,
                response_deserializer=glidergun__pb2.TokenResponse.FromString,
                )
        self.check = channel.unary_unary(
                '/glidergun.Grpc/check',
                request_serializer=glidergun__pb2.CheckRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.create = channel.unary_unary(
                '/glidergun.Grpc/create',
                request_serializer=glidergun__pb2.CreateRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.save = channel.unary_unary(
                '/glidergun.Grpc/save',
                request_serializer=glidergun__pb2.SaveRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterResponse.FromString,
                )
        self.mathRaster = channel.unary_unary(
                '/glidergun.Grpc/mathRaster',
                request_serializer=glidergun__pb2.MathRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.mathRasterRaster = channel.unary_unary(
                '/glidergun.Grpc/mathRasterRaster',
                request_serializer=glidergun__pb2.MathRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.mathRasterInt = channel.unary_unary(
                '/glidergun.Grpc/mathRasterInt',
                request_serializer=glidergun__pb2.MathRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.mathRasterDouble = channel.unary_unary(
                '/glidergun.Grpc/mathRasterDouble',
                request_serializer=glidergun__pb2.MathRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.mathIntRaster = channel.unary_unary(
                '/glidergun.Grpc/mathIntRaster',
                request_serializer=glidergun__pb2.MathRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.mathDoubleRaster = channel.unary_unary(
                '/glidergun.Grpc/mathDoubleRaster',
                request_serializer=glidergun__pb2.MathRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.mathRasterRasterRaster = channel.unary_unary(
                '/glidergun.Grpc/mathRasterRasterRaster',
                request_serializer=glidergun__pb2.MathRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.mathRasterRasterInt = channel.unary_unary(
                '/glidergun.Grpc/mathRasterRasterInt',
                request_serializer=glidergun__pb2.MathRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.mathRasterIntRaster = channel.unary_unary(
                '/glidergun.Grpc/mathRasterIntRaster',
                request_serializer=glidergun__pb2.MathRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.mathRasterIntInt = channel.unary_unary(
                '/glidergun.Grpc/mathRasterIntInt',
                request_serializer=glidergun__pb2.MathRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.mathRasterRasterDouble = channel.unary_unary(
                '/glidergun.Grpc/mathRasterRasterDouble',
                request_serializer=glidergun__pb2.MathRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.mathRasterDoubleRaster = channel.unary_unary(
                '/glidergun.Grpc/mathRasterDoubleRaster',
                request_serializer=glidergun__pb2.MathRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.mathRasterDoubleDouble = channel.unary_unary(
                '/glidergun.Grpc/mathRasterDoubleDouble',
                request_serializer=glidergun__pb2.MathRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.aspect = channel.unary_unary(
                '/glidergun.Grpc/aspect',
                request_serializer=glidergun__pb2.AspectRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.color = channel.unary_unary(
                '/glidergun.Grpc/color',
                request_serializer=glidergun__pb2.ColorRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.composite = channel.unary_unary(
                '/glidergun.Grpc/composite',
                request_serializer=glidergun__pb2.CompositeRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.extract = channel.unary_unary(
                '/glidergun.Grpc/extract',
                request_serializer=glidergun__pb2.ExtractRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.extractValues = channel.unary_unary(
                '/glidergun.Grpc/extractValues',
                request_serializer=glidergun__pb2.ExtractValuesRequest.SerializeToString,
                response_deserializer=glidergun__pb2.ExtractValuesResponse.FromString,
                )
        self.focal = channel.unary_unary(
                '/glidergun.Grpc/focal',
                request_serializer=glidergun__pb2.FocalRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.hillshade = channel.unary_unary(
                '/glidergun.Grpc/hillshade',
                request_serializer=glidergun__pb2.HillshadeRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.project = channel.unary_unary(
                '/glidergun.Grpc/project',
                request_serializer=glidergun__pb2.ProjectRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.randomize = channel.unary_unary(
                '/glidergun.Grpc/randomize',
                request_serializer=glidergun__pb2.RandomizeRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.resample = channel.unary_unary(
                '/glidergun.Grpc/resample',
                request_serializer=glidergun__pb2.ResampleRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.slope = channel.unary_unary(
                '/glidergun.Grpc/slope',
                request_serializer=glidergun__pb2.SlopeRequest.SerializeToString,
                response_deserializer=glidergun__pb2.RasterInfoResponse.FromString,
                )
        self.thumbnail = channel.unary_unary(
                '/glidergun.Grpc/thumbnail',
                request_serializer=glidergun__pb2.ThumbnailRequest.SerializeToString,
                response_deserializer=glidergun__pb2.ThumbnailResponse.FromString,
                )


class GrpcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def token(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def save(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mathRaster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mathRasterRaster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mathRasterInt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mathRasterDouble(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mathIntRaster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mathDoubleRaster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mathRasterRasterRaster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mathRasterRasterInt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mathRasterIntRaster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mathRasterIntInt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mathRasterRasterDouble(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mathRasterDoubleRaster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mathRasterDoubleDouble(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def aspect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def color(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def composite(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def extract(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def extractValues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def focal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hillshade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def project(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def randomize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resample(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def slope(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def thumbnail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GrpcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'token': grpc.unary_unary_rpc_method_handler(
                    servicer.token,
                    request_deserializer=glidergun__pb2.TokenRequest.FromString,
                    response_serializer=glidergun__pb2.TokenResponse.SerializeToString,
            ),
            'check': grpc.unary_unary_rpc_method_handler(
                    servicer.check,
                    request_deserializer=glidergun__pb2.CheckRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=glidergun__pb2.CreateRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'save': grpc.unary_unary_rpc_method_handler(
                    servicer.save,
                    request_deserializer=glidergun__pb2.SaveRequest.FromString,
                    response_serializer=glidergun__pb2.RasterResponse.SerializeToString,
            ),
            'mathRaster': grpc.unary_unary_rpc_method_handler(
                    servicer.mathRaster,
                    request_deserializer=glidergun__pb2.MathRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'mathRasterRaster': grpc.unary_unary_rpc_method_handler(
                    servicer.mathRasterRaster,
                    request_deserializer=glidergun__pb2.MathRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'mathRasterInt': grpc.unary_unary_rpc_method_handler(
                    servicer.mathRasterInt,
                    request_deserializer=glidergun__pb2.MathRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'mathRasterDouble': grpc.unary_unary_rpc_method_handler(
                    servicer.mathRasterDouble,
                    request_deserializer=glidergun__pb2.MathRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'mathIntRaster': grpc.unary_unary_rpc_method_handler(
                    servicer.mathIntRaster,
                    request_deserializer=glidergun__pb2.MathRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'mathDoubleRaster': grpc.unary_unary_rpc_method_handler(
                    servicer.mathDoubleRaster,
                    request_deserializer=glidergun__pb2.MathRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'mathRasterRasterRaster': grpc.unary_unary_rpc_method_handler(
                    servicer.mathRasterRasterRaster,
                    request_deserializer=glidergun__pb2.MathRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'mathRasterRasterInt': grpc.unary_unary_rpc_method_handler(
                    servicer.mathRasterRasterInt,
                    request_deserializer=glidergun__pb2.MathRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'mathRasterIntRaster': grpc.unary_unary_rpc_method_handler(
                    servicer.mathRasterIntRaster,
                    request_deserializer=glidergun__pb2.MathRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'mathRasterIntInt': grpc.unary_unary_rpc_method_handler(
                    servicer.mathRasterIntInt,
                    request_deserializer=glidergun__pb2.MathRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'mathRasterRasterDouble': grpc.unary_unary_rpc_method_handler(
                    servicer.mathRasterRasterDouble,
                    request_deserializer=glidergun__pb2.MathRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'mathRasterDoubleRaster': grpc.unary_unary_rpc_method_handler(
                    servicer.mathRasterDoubleRaster,
                    request_deserializer=glidergun__pb2.MathRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'mathRasterDoubleDouble': grpc.unary_unary_rpc_method_handler(
                    servicer.mathRasterDoubleDouble,
                    request_deserializer=glidergun__pb2.MathRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'aspect': grpc.unary_unary_rpc_method_handler(
                    servicer.aspect,
                    request_deserializer=glidergun__pb2.AspectRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'color': grpc.unary_unary_rpc_method_handler(
                    servicer.color,
                    request_deserializer=glidergun__pb2.ColorRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'composite': grpc.unary_unary_rpc_method_handler(
                    servicer.composite,
                    request_deserializer=glidergun__pb2.CompositeRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'extract': grpc.unary_unary_rpc_method_handler(
                    servicer.extract,
                    request_deserializer=glidergun__pb2.ExtractRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'extractValues': grpc.unary_unary_rpc_method_handler(
                    servicer.extractValues,
                    request_deserializer=glidergun__pb2.ExtractValuesRequest.FromString,
                    response_serializer=glidergun__pb2.ExtractValuesResponse.SerializeToString,
            ),
            'focal': grpc.unary_unary_rpc_method_handler(
                    servicer.focal,
                    request_deserializer=glidergun__pb2.FocalRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'hillshade': grpc.unary_unary_rpc_method_handler(
                    servicer.hillshade,
                    request_deserializer=glidergun__pb2.HillshadeRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'project': grpc.unary_unary_rpc_method_handler(
                    servicer.project,
                    request_deserializer=glidergun__pb2.ProjectRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'randomize': grpc.unary_unary_rpc_method_handler(
                    servicer.randomize,
                    request_deserializer=glidergun__pb2.RandomizeRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'resample': grpc.unary_unary_rpc_method_handler(
                    servicer.resample,
                    request_deserializer=glidergun__pb2.ResampleRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'slope': grpc.unary_unary_rpc_method_handler(
                    servicer.slope,
                    request_deserializer=glidergun__pb2.SlopeRequest.FromString,
                    response_serializer=glidergun__pb2.RasterInfoResponse.SerializeToString,
            ),
            'thumbnail': grpc.unary_unary_rpc_method_handler(
                    servicer.thumbnail,
                    request_deserializer=glidergun__pb2.ThumbnailRequest.FromString,
                    response_serializer=glidergun__pb2.ThumbnailResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'glidergun.Grpc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Grpc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def token(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/token',
            glidergun__pb2.TokenRequest.SerializeToString,
            glidergun__pb2.TokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/check',
            glidergun__pb2.CheckRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/create',
            glidergun__pb2.CreateRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def save(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/save',
            glidergun__pb2.SaveRequest.SerializeToString,
            glidergun__pb2.RasterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mathRaster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/mathRaster',
            glidergun__pb2.MathRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mathRasterRaster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/mathRasterRaster',
            glidergun__pb2.MathRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mathRasterInt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/mathRasterInt',
            glidergun__pb2.MathRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mathRasterDouble(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/mathRasterDouble',
            glidergun__pb2.MathRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mathIntRaster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/mathIntRaster',
            glidergun__pb2.MathRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mathDoubleRaster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/mathDoubleRaster',
            glidergun__pb2.MathRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mathRasterRasterRaster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/mathRasterRasterRaster',
            glidergun__pb2.MathRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mathRasterRasterInt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/mathRasterRasterInt',
            glidergun__pb2.MathRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mathRasterIntRaster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/mathRasterIntRaster',
            glidergun__pb2.MathRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mathRasterIntInt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/mathRasterIntInt',
            glidergun__pb2.MathRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mathRasterRasterDouble(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/mathRasterRasterDouble',
            glidergun__pb2.MathRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mathRasterDoubleRaster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/mathRasterDoubleRaster',
            glidergun__pb2.MathRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mathRasterDoubleDouble(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/mathRasterDoubleDouble',
            glidergun__pb2.MathRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def aspect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/aspect',
            glidergun__pb2.AspectRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def color(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/color',
            glidergun__pb2.ColorRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def composite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/composite',
            glidergun__pb2.CompositeRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def extract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/extract',
            glidergun__pb2.ExtractRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def extractValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/extractValues',
            glidergun__pb2.ExtractValuesRequest.SerializeToString,
            glidergun__pb2.ExtractValuesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def focal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/focal',
            glidergun__pb2.FocalRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def hillshade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/hillshade',
            glidergun__pb2.HillshadeRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def project(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/project',
            glidergun__pb2.ProjectRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def randomize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/randomize',
            glidergun__pb2.RandomizeRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def resample(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/resample',
            glidergun__pb2.ResampleRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def slope(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/slope',
            glidergun__pb2.SlopeRequest.SerializeToString,
            glidergun__pb2.RasterInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def thumbnail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glidergun.Grpc/thumbnail',
            glidergun__pb2.ThumbnailRequest.SerializeToString,
            glidergun__pb2.ThumbnailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
